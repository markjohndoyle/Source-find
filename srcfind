#!/usr/bin/python

import string
import os
import sys
import time
import re

##########################################
# Class that holds some colour constants #
##########################################
class Colour:
    PURPLE = "\033[95m"
    OK_BLUE = "\033[94m"
    GREEN = "\033[92m"
    YELLOW = "\033[93m"
    RED = "\033[91m"
    ENDC = "\033[0m"
    
#####################################
# Prints using the colour passed in #
#####################################
def printCol(col, text):
	print col + text + Colour.ENDC
    
#############################################
# Converts a string to a regular expression #
#############################################
def getRegExpression(exp):
	try:
		# escapes a string and then compiles it as a regular expression
		expression = re.compile(re.escape(exp))
		return expression
	except re.error:
		printCol(Colour.RED, "Invalid regular expression")
		sys.exit(1)
		
####################
# Colours a string #
####################
def colourString(col, string):
	return col + string + Colour.ENDC

#######################
# Safely opens a file #
#######################
def openFile(file):
	try:
		fileStream = open(file, 'r')
		return fileStream
	except IOError:
		print "error opening " + file
		sys.exit(1)

################################################
# Converts the keyword to a regular expression #
# and finds what it represents in the list of  #
# files passed in.                             #
################################################
def searchForKeywordInFile(files, keyword):
	expression = getRegExpression(keyword)

	# for every file passed in...
	for file in files:
		# open tghe file and read in all the lines...
		fileStream = openFile(file)
		lines = fileStream.readlines();
		# Set a flag to determine if we have yet matched the expression in the file (for nice output only)
		firstFindInFile = False
		
		# now, for every line in the file (enumerated to track the line number)...
		for lineNo, line in enumerate(lines):
			# strip the leading white space and search for the expression in the line
			line = line.lstrip()
			matchObj = expression.search(line)
			# if we matched the expression...
			if matchObj is not None:
				# ..and we haven't yet matched in this file
				if firstFindInFile is False:
					# print a useful header for all matches in this file and set the flag to true so we don't print
					# the header everytime we match in the same file.
					printCol(Colour.OK_BLUE, "Found in file: " + file)
					firstFindInFile = True
					
					# now print out the line number and entire line we matched the expression on and highlight the match in red
					highlightedLine =  line[:matchObj.start()] + colourString(Colour.RED, line[matchObj.start():matchObj.end()]) + line[matchObj.end():]
					print colourString(Colour.YELLOW, str(lineNo)) + ": " + highlightedLine

#####################
# get all the files #
#####################
def getFiles(targetdir, fileTypes):
	allfiles = []
	# for every file in the directory tree passed in
	for dir, subdirs, files in os.walk(targetdir):
		# check if it is one of the specified language type source files
		for f in files:
			for fileType in fileTypes:
				if str.lower(f).endswith(fileType):
					# compute full path name
					f = os.path.join(dir, f)
					# append it to the files list				    
					allfiles.append(f)
		        else:
					continue
	return allfiles

###########################
# print debug information #
###########################
def printParameters() :
	printCol(Colour.PURPLE, "Searching for \"" + searchKeyword + "\" in " + language + " files inside " + srcPath + "\n")



###############
# Script main #
###############
if len(sys.argv) != 4:
	sys.stderr.write("Usage : srcfind srcPath languageType searchKeyword\n")
	raise SystemExit(1)

srcPath = sys.argv[1]
language = sys.argv[2]
searchKeyword = sys.argv[3]

printParameters()

# TODO move to a parse argument method
if str.lower(language) == "c" or str.lower(language) ==  "cpp":
	printCol(Colour.GREEN, "Searching C/C++ source\n")
	fileType = [".c", ".h", ".cpp", ".hpp"]
elif str.lower(language) == "java":
	printCol(Colour.GREEN, "Searching Java source\n")
	fileType = [".java"]
elif str.lower(language) == "python":
	printCol(Colour.GREEN, "Searching Python source\n")
	fileType = ["*.py"]
elif str.lower(language) == "shell":
	printCol(Colour.GREEN, "Searching Shell scripts (including python scripts)\n")
	# TODO Add logic to only check python based scripts and not all python files as it does now
	fileType = ["*.sh", "*.py"]
else:
	printCol(Colour.YELLOW, "Warning cannot deduce programming language, using user input as file type extension\n")
	fileType = language


searchForKeywordInFile(getFiles(srcPath, fileType), searchKeyword)

